name: Build and Release CMake Project

on:
  push:
    # branches:
    #   - master
    tags:
      - '*' # Push events to every tag not containing /

jobs:
  #########################################
  # Build executable for GNU/Linux
  #########################################
  build-and-release-linux:
    name: Build and Upload Release Artifact (Linux)
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags

      # Install dependencies
      - name: Install OpenGL and related libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ make libglew-dev freeglut3-dev libgl1-mesa-dev libglu1-mesa-dev

      # Configure and build using CMake
      - name: Build project
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release -j$(nproc)
          cd ..

      # Archive the build artifacts
      - name: Archive build artifacts
        run: |
          mkdir artifacts
          cp build/latrop artifacts/  # Copy the latrop binary
          cp docs/CONTROLS.md artifacts/  # Copy the control scheme
          cp -r build/data artifacts/  # Copy the data folder
          cp -r build/maps artifacts/  # Copy the maps folder
          tar -czf linux-build.tar.gz -C artifacts .

      # Upload the build as artifact for the release job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: linux-build.tar.gz



  #########################################
  # Build exe for Windows
  #########################################
  build-and-release-windows:
    name: Build and Upload Release Artifact (Windows)
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies through vcpkg
      - name: Install vcpkg and packages
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install opengl:x64-windows freeglut:x64-windows glew:x64-windows
          .\vcpkg.exe integrate install
          cd ..

      # Configure the build using CMake
      - name: Configure CMake (Windows)
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=D:/a/LATROP-Uni-PwAG/LATROP-Uni-PwAG/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows -G "Visual Studio 17 2022" -A x64
        # cmake --help-module-list
        # cmake --help-module FindGLEW

      # Build using CMake
      - name: Build project
        run: cmake --build build --config Release

      # - name: Download and Install Windows SDK
      #   run: |
      #     curl -L -o windows-sdk-installer.exe https://aka.ms/installwindows-sdk
      #     .\windows-sdk-installer.exe /quiet /norestart /features +DebuggingTools,+WindowsAppSDK,+ApplicationVerifier
      #   shell: cmd

      # - name: Generate test certificate
      #   run: |
      #     powershell -Command "
      #       mkdir cert && cd cert;
      #       $env:CertPath = 'test-cert.cer';
      #       $env:PfxPath = 'test-cert.pfx';
      #       $env:KeyName = 'TestKey';
      #       makecert -r -pe -n \"CN=TestCertificate\" -a sha256 -len 2048 -cy end -sv $env:KeyName.pvk $env:CertPath;
      #       pvk2pfx -pvk $env:KeyName.pvk -spc $env:CertPath -pfx $env:PfxPath -po Password123;
      #     "
      #   shell: cmd

      # - name: Sign the executable
      #   run: |
      #     "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign /f cert/test-cert.pfx /p Password123 /fd sha256 /t http://timestamp.digicert.com build\Release\latrop.exe

      # - name: Verify signature
      #   run: |
      #     "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" verify /pa /v build\Release\latrop.exe

      # - name: Verify Build content
      #   run: |
      #     dir build
      #     dir build\Release

      # Create an archive with the build
      - name: Archive build artifacts
        run: |
          mkdir artifacts
          xcopy build\Release artifacts\ /E/H/I/Q/Y
          xcopy docs\CONTROLS.md artifacts\ /Y
          xcopy build\data artifacts\data /E/H/I/Q/Y
          xcopy build\maps artifacts\maps /E/H/I/Q/Y
          tar -czf windows-build.tar.gz -C artifacts .

      # - name: Verify artifacts content
      #   run: dir artifacts

      # Upload the build as artifact for the release job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: windows-build.tar.gz



  #########################################
  # Create GitHub Release
  #########################################
  create-release:
    name: Create GitHub Release

    runs-on: ubuntu-latest

    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases

    # Will run only if both builds succeeded
    needs:
      - build-and-release-linux
      - build-and-release-windows

    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags

      # Download Linux artifacts
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux

      # Download Windows artifacts
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows

      # Fetch the history of commits to append to the release
      - name: Fetch commit messages
        id: get_commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Previous tag: $PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

          # Fetch commit messages only, excluding commit IDs
          COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" --reverse)
          echo "Commit messages between $PREVIOUS_TAG and current tag:"
          echo "$COMMITS"

          # Initialize formatted commits variable
          FORMATTED_COMMITS=""
          COUNTER=1

          # Process each commit
          while read -r commit; do
            FORMATTED_COMMITS+=$'\n'"- commit ${COUNTER}:"
            IFS=';' read -ra SUBCOMMITS <<< "$commit"
            for subcommit in "${SUBCOMMITS[@]}"; do
              # Remove version pattern (e.g., "(version X.Y.Z)")
              CLEANED_SUBCOMMIT=$(echo "$subcommit" | sed -E 's/\s*\(version [0-9]+\.[0-9]+\.[0-9]+\)//g')
              FORMATTED_COMMITS+=$'\n'"  - ${CLEANED_SUBCOMMIT}"
            done
            ((COUNTER++))
          done <<< "$COMMITS"

          echo "FORMATTED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$FORMATTED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create the release and append the formatted commits
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create '${{ github.ref_name }}' \
          --repo '${{ github.repository }}' \
          --notes "Latest package release ${{ github.ref_name }}

          ## Changes:

          ${{ env.FORMATTED_COMMITS }}"

      # Upload the artifact as part of the release
      - name: Upload artifact to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `linux-build.tar.gz` contains the build for GNU/Linux
        # `windows-build.tar.gz` contains the build for Windows
        run: >-
          gh release upload '${{ github.ref_name }}' linux/linux-build.tar.gz windows/windows-build.tar.gz
          --repo '${{ github.repository }}'
