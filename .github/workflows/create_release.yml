name: Build and Release CMake Project

on:
  push:
    branches:
      - master
    # tags:
    #   - '*' # Push events to every tag not containing /

jobs:
  build-and-release-linux:
    name: Build and Upload Release Artifact (Linux)
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to upload to a GitHub release

    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags

      # Install dependencies
      - name: Install OpenGL and related libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ make libglew-dev freeglut3-dev libgl1-mesa-dev libglu1-mesa-dev

      # Configure and build using CMake
      - name: Build project
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release

      # Archive the build artifacts
      - name: Archive build artifacts
        run: |
          mkdir artifacts
          cp build/latrop artifacts/  # Copy the latrop binary
          cp -r build/data artifacts/  # Copy the data folder
          cp -r build/maps artifacts/  # Copy the maps folder
          tar -czf build-artifacts-linux.tar.gz -C artifacts .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifacts
          path: build-artifacts-linux.tar.gz

  build-and-release-windows:
    name: Build and Upload Release Artifact (Windows)
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install vcpkg manually
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install
          .\vcpkg.exe install glew freeglut
          cd ..

      - name: Set VCPKG_ROOT
        run: echo "VCPKG_ROOT=$PWD/vcpkg" >> $GITHUB_ENV
        
      - name: Configure CMake (Windows)
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Build project
        run: cmake --build build --config Release

      - name: Archive build artifacts
        run: |
          mkdir artifacts
          copy build\Release\latrop.exe artifacts\ 
          xcopy build\data artifacts\data /E/H/Q/Y
          xcopy build\maps artifacts\maps /E/H/Q/Y
          tar -czf build-artifacts-windows.tar.gz -C artifacts .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: build-artifacts-windows.tar.gz


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    needs:
      - build-and-release-linux
      - build-and-release-windows

    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-artifacts
          path: linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-artifacts
          path: windows

      # Fetch the history of commits and append it to the release
      - name: Fetch commit messages
        id: get_commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Previous tag: $PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

          # Fetch commit messages only, excluding commit IDs
          COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" --reverse)
          echo "Commit messages between $PREVIOUS_TAG and current tag:"
          echo "$COMMITS"

          # Initialize formatted commits variable
          FORMATTED_COMMITS=""
          COUNTER=1

          # Process each commit
          while read -r commit; do
            FORMATTED_COMMITS+=$'\n'"- commit ${COUNTER}:"
            IFS=';' read -ra SUBCOMMITS <<< "$commit"
            for subcommit in "${SUBCOMMITS[@]}"; do
              # Remove version pattern (e.g., "(version X.Y.Z)")
              CLEANED_SUBCOMMIT=$(echo "$subcommit" | sed -E 's/\s*\(version [0-9]+\.[0-9]+\.[0-9]+\)//g')
              FORMATTED_COMMITS+=$'\n'"  - ${CLEANED_SUBCOMMIT}"
            done
            ((COUNTER++))
          done <<< "$COMMITS"

          echo "FORMATTED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$FORMATTED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Upload the artifact as part of the release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create '${{ github.ref_name }}' \
          --repo '${{ github.repository }}' \
          --notes "Latest package release ${{ github.ref_name }}

          ## Changes:

          ${{ env.FORMATTED_COMMITS }}"

      - name: Upload artifact to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `build-artifacts-linux.tar.gz` contains the built game
        run: >-
          gh release upload '${{ github.ref_name }}' linux/build-artifacts-linux.tar.gz windows/build-artifacts-windows.tar.gz
          --repo '${{ github.repository }}'
